<%
getUtil = function () {
  return {

    type: (type, obj) => {
      var tp = Object.prototype.toString.call(obj).replace(/^\[object (.+)\]$/, '$1').toLowerCase();
      return obj !== undefined && obj !== null && tp === type;
    },

    hasModifier: (modifiers, checkString) => {
      if (util.type('array', modifiers)) {
        return modifiers.join('').indexOf(checkString) !== -1;
      }
      if (util.type('string', modifiers)) {
        return modifiers.indexOf(checkString) !== -1;
      }
      throw new Error(typeof modifiers);
    },

    hasNoModifier: (modifiers) => {
      const modifierArray = modifiers;
      if (util.type('string', modifier)) {
        modifierArray = modifiers.replace(/\s+/, ' ').replace(/\s$/, '').modifiers.split(' ');
      }

      let result = true;
      modifierArray.forEach((string) => {
        if (string.match(/^(i|j)s-/) === null && string !== '') {
          result = false;
        }
      });

      return result;
    },

    setModifierString: (name, modifier) => {
      // ignore 'is-*', 'js-*', '*__*' rule
      if (modifier.match(/(^(i|j)s-)|(^.*?__)/) !== null) {
        return modifier;
      }

      if (modifier === ' ' || modifier === '') {
        return;
      }

      return name + '--' + modifier;
    },

    setModifierArray: (name, modifiers) => {
      return modifiers
        .map(function (element) {
          return util.setModifierString(name, element);
        })
        .join(' ');
    },

    checkSpace: (name, string) => {
      if (string.indexOf(' ') === -1) {
        return util.setModifierString(name, string);
      }
      return util.setModifierArray(name, string.split(' '));
    },

    setModifier: (name, modifier) => {
      if (util.type('string', modifier)) {
        if (modifier === '') {
          return '';
        }
        return ' ' + util.checkSpace(name, modifier);
      }

      if (util.type('array', modifier)) {
        if (modifier === []) {
          return '';
        }
        return ' ' + util.setModifierArray(name, modifier);
      }
    },

    floatFormat: (number, n) => {
      const _pow = Math.pow(10, n);
      return Math.round(number * _pow) / _pow;
    },

    init: () => {
      return (util, component) => {
        // load global data
        if (typeof data === 'undefined') {
          include(ejsRoot + 'view/data/_data');
          data = getData();
        }

        // check params and set default value
        const params = component.params;
        for (const p in params) {
          component[p] = params[p];
        }

        if (typeof params['data'] === 'undefined') {
          params.data = data;
        }
      }
    },

    printAttr: (attr, val) => {
      if (!util.type('string', val) || !util.type('string', attr)) {
        console.log('"val and attr" must be a string!');
        return '';
      }
      if (val === 'undefined') {
        return '###ERROR###';
      }
      if (val === '') {
        return '';
      }
      return ` ${attr}="${val}"`;
    },

    addModifierToParam: (param, className) => {
      if (!util.type('object', param)) {
        console.log('param is not object!');
        return param;
      }

      if (!util.type('string', className)) {
        console.log('className is not string!');
        return param;
      }

      const p = Object.assign({}, param);
      p.modifier += ` ${className}`;

      return p;
    }

  };
};
%>
